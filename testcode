//
//  AppDelegate.swift
//
//

import UIKit
//import CoreData
import FacebookLogin
import FacebookCore
import Firebase
import GoogleSignIn
#if DEBUG
import FLEX
#endif
import IQKeyboardManagerSwift
import UserNotifications
import AVFoundation.AVFAudio
import Stripe
import MapboxMaps

var homeMapVC = HomeMapVC()
 
@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate{
    let gcmMessageIDKey = "gcm.message_id"
    var window: UIWindow?
    var orientation: UIInterfaceOrientationMask = .portrait
    var isMusicStart = false
    var isAppIsInBackGround = false
    var backgroundUpdateTask: UIBackgroundTaskIdentifier = UIBackgroundTaskIdentifier(rawValue: 0)

        func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {
            return orientation
        }

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
//        printFonts()//".HelveticaNeueDeskInterface-Regular"
        //status bar color
        setStatusBarBackgroundColor(color: Colors.lightBlackColor)

        //config firebase
        FirebaseApp.configure()
        Messaging.messaging().delegate = self

        //review manager
        UserReviewManger.handleUserReviewAboutAppOnAppStore()
        

        //check login
        var seq = -1
        if let cookies = HTTPCookieStorage.shared.cookies {
            for cookie in cookies {
                if cookie.name == "u-seq" {
                    seq = Int(cookie.value) ?? -1
                    break
                }
            }
        }

        IQKeyboardManager.shared.enable = true
        IQKeyboardManager.shared.shouldResignOnTouchOutside = true
        window = UIWindow(frame: UIScreen.main.bounds)
     //   print("seq : \(seq) validator seq : \(Validator.userSeq)")
        if seq == Validator.userSeq && Validator.userSeq != -1{
            Utils.userSeq = seq
            window!.rootViewController = homeMapVC
        } else {
            window!.rootViewController = WalkThroughVC()
        }

        window!.makeKeyAndVisible()
        
      
        

        //check for update
        if Bundle.main.bundleIdentifier == "app.farwide.com" {
            recheckUpdateAvailableOrNot()
            _ = Timer.scheduledTimer(timeInterval: 86400, target: self, selector: #selector(recheckUpdateAvailableOrNot), userInfo: nil, repeats: true)
        }
        
        checkForRemoteNotification(application: application)

        let tap = UITapGestureRecognizer(target: self, action: #selector(flexTapped))
        tap.numberOfTouchesRequired = 2
        window?.addGestureRecognizer(tap)
        disableDarkMode()
        setupAudioSession()
        return true
    }
    //MARK:- Music From Other apps to play
    private func setupAudioSession() {
        do{
            isMusicStart = true
            try AVAudioSession.sharedInstance().setCategory(AVAudioSession.Category.ambient, mode: AVAudioSession.Mode.default, options: [.mixWithOthers])
               try AVAudioSession.sharedInstance().setActive(true)
           }catch{
               print("something went wrong")
           }
     
        }
    
    //MARK: -Disabling Dark Mode For App
    func disableDarkMode()  {
        if #available(iOS 13.0, *) {
            window?.overrideUserInterfaceStyle = .light
        }
    }
    @objc func flexTapped() {
        #if DEBUG
            FLEXManager.shared.showExplorer()
        #endif
    }
    //MARK: - Remote notifications
    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any]) {
      // If you are receiving a notification message while your app is in the background,
      // this callback will not be fired till the user taps on the notification launching the application.
      // TODO: Handle data of notification

      // With swizzling disabled you must let Messaging know about the message, for Analytics

      // Print full message.
//        DispatchQueue.main.async {
//            Toast.shared.display(message: "\(userInfo)")
//        }
      print(userInfo)
    }
   
    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any],
                     fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
      // If you are receiving a notification message while your app is in the background,
      // this callback will not be fired till the user taps on the notification launching the application.
      // TODO: Handle data of notification

      // With swizzling disabled you must let Messaging know about the message, for Analytics
      // Messaging.messaging().appDidReceiveMessage(userInfo)
      // Print full message.
        if let messageID = userInfo[gcmMessageIDKey] {
                   print("Message ID: \(messageID)")
               }
        let window = UIApplication.shared.keyWindow
      

      completionHandler(UIBackgroundFetchResult.newData)
    }
    func extractUserInfo(userInfo: [AnyHashable : Any]) -> (title: String, body: String) {
        var info = (title: "", body: "")
        guard let aps = userInfo["aps"] as? [String: Any] else { return info }
        guard let alert = aps["alert"] as? [String: Any] else { return info }
        let title = alert["title"] as? String ?? ""
        let body = alert["body"] as? String ?? ""
        info = (title: title, body: body)
        return info
    }
    private func application(application: UIApplication,
                     didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
      Messaging.messaging().apnsToken = deviceToken
    }
   
    func checkForRemoteNotification(application : UIApplication) {
        if #available(iOS 10.0, *) {
          // For iOS 10 display notification (sent via APNS)
          UNUserNotificationCenter.current().delegate = self

          let authOptions: UNAuthorizationOptions = [.alert, .badge, .sound]
          UNUserNotificationCenter.current().requestAuthorization(
            options: authOptions,
            completionHandler: {_, _ in })
        } else {
          let settings: UIUserNotificationSettings =
          UIUserNotificationSettings(types: [.alert, .badge, .sound], categories: nil)
          application.registerUserNotificationSettings(settings)
        }

        application.registerForRemoteNotifications()
        UNUserNotificationCenter.current().delegate = self

    }
        

    //MARK:- Open custom URL Scheme Fb, Gmail
    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
        let fbFlag = ApplicationDelegate.shared.application(app, open: url, options: options)
        let googleFlag = GIDSignIn.sharedInstance.handle(url)
        print(url)
        return fbFlag || googleFlag
    }
    //MARK: - For deep Linking
    func application(_ application: UIApplication,
                     continue userActivity: NSUserActivity,
                     restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {
        
        // 1 get url component
        guard userActivity.activityType == NSUserActivityTypeBrowsingWeb,
              let url = userActivity.webpageURL,
              var
                components = URLComponents(url: url, resolvingAgainstBaseURL: true) else {
                return false
        }
        components.percentEncodedQuery = components.percentEncodedQuery?
            .replacingOccurrences(of: "+", with: "%2B")
        components.percentEncodedQuery = components.percentEncodedQuery?
            .replacingOccurrences(of: ";", with: ",")
      
        // 2 access path and appended data
        let path = components.path
        var data = [String : String]()
        if let queryItems = components.queryItems {
            for item in queryItems {
                data[item.name] = item.value?.replacingOccurrences(of: "+", with: " ").trimmingCharacters(in: .whitespacesAndNewlines)
            }
        }
      
                
        // 3
      //  application.openURL(url)
        
        return false
    }

    func getDataDicFromUrl(paramString:String) -> [String:String] {
        let paramArr = paramString.components(separatedBy: "&")
        var data : [String:String] = [:]
        for param in paramArr {
            let elementArr = param.components(separatedBy: "=")
            if elementArr.count >= 2 {
                data[elementArr[0]] = elementArr[1]
            } else if elementArr.count >= 1 {
                data[elementArr[0]] = ""
            }
        }
        return data
    }
    //Check for app update availability
    
    @objc func recheckUpdateAvailableOrNot() {

        
       
    }
    

    func endBackgroundUpdateTask() {
        UIApplication.shared.endBackgroundTask(self.backgroundUpdateTask)
        self.backgroundUpdateTask = UIBackgroundTaskIdentifier.invalid
    }
//MARK: - App states
    func applicationWillResignActive(_ application: UIApplication) {
        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
        // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
//        self.backgroundUpdateTask = UIApplication.shared.beginBackgroundTask(expirationHandler: {
//            self.endBackgroundUpdateTask()
//        })
       
    }

    func applicationDidEnterBackground(_ application: UIApplication) {
        do{
            try AVAudioSession.sharedInstance().setActive(false, options: .notifyOthersOnDeactivation)
           }catch{
               print("something went wrong")
           }
//        self.backgroundUpdateTask = UIApplication.shared.beginBackgroundTask(expirationHandler: {
//            self.endBackgroundUpdateTask()
//        })
        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
    }

    func applicationWillEnterForeground(_ application: UIApplication) {
        setStatusBarBackgroundColor(color: Colors.lightBlackColor)

        isAppIsInBackGround = true
        self.setupAudioSession()
        // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
    }

    func applicationDidBecomeActive(_ application: UIApplication) {
        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
      //  self.endBackgroundUpdateTask()
        setStatusBarBackgroundColor(color: Colors.lightBlackColor)
        if let homeMapVC = SavedManager.shared.homeMapViewController {
            homeMapVC.showLocationUpdateOnMap()
            homeMapVC.shareUserLocation()
            homeMapVC.updateCurrentUserLocation(coordinate: homeMapVC.currentLocation)
        }
    }

    func applicationWillTerminate(_ application: UIApplication) {
        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
        // Saves changes in the application's managed object context before the application terminates.
                                                                          
//        self.saveContext()
        if SavedManager.shared.socket != nil {
            SavedManager.shared.socket.disconnect()
            SavedManager.shared.socket = nil
            SavedManager.shared.messageManager = nil
        }
    }
    
    func application(_ application: UIApplication, handleEventsForBackgroundURLSession identifier: String, completionHandler: @escaping () -> Void) {
        print("handleEventsForBackgroundURLSession--")
        if identifier == sessionIdentifier{
            UploadSessionManager.shareInstance.addCompletionHandler(handler: completionHandler, identifier: sessionIdentifier)
        }
    }
}
